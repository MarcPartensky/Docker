version: "3.9"
services:

  # traefik:
  #   image: traefik:v2.0
  #   restart: always
  #   container_name: traefik
  #   ports:
  #     - "80:80" # <== http
  #     - "8080:8080" # <== :8080 is where the dashboard runs on
  #     - "443:443" # <== https
  #   command:
  #     #### These are the CLI commands that will configure Traefik and tell it how to work! ####
  #     ## API Settings - https://docs.traefik.io/operations/api/, endpoints - https://docs.traefik.io/operations/api/#endpoints ##
  #     - --api.insecure=true # <== Enabling insecure api, NOT RECOMMENDED FOR PRODUCTION
  #     - --api.dashboard=true # <== Enabling the dashboard to view services, middlewares, routers, etc...
  #     - --api.debug=true # <== Enabling additional endpoints for debugging and profiling
  #     ## Log Settings (options: ERROR, DEBUG, PANIC, FATAL, WARN, INFO) - https://docs.traefik.io/observability/logs/ ##
  #     - --log.level=DEBUG # <== Setting the level of the logs from traefik
  #     ## Provider Settings - https://docs.traefik.io/providers/docker/#provider-configuration ##
  #     - --providers.docker=true # <== Enabling docker as the provider for traefik
  #     - --providers.docker.exposedbydefault=false # <== Don't expose every container to traefik, only expose enabled ones
  #     - --providers.file.filename=/dynamic.yaml # <== Referring to a dynamic configuration file
  #     - --providers.docker.network=web # <== Operate on the docker network named web
  #     ## Entrypoints Settings - https://docs.traefik.io/routing/entrypoints/#configuration ##
  #     - --entrypoints.web.address=:80 # <== Defining an entrypoint for port :80 named web
  #     - --entrypoints.web-secured.address=:443 # <== Defining an entrypoint for https on port :443 named web-secured
  #     ## Certificate Settings (Let's Encrypt) -  https://docs.traefik.io/https/acme/#configuration-examples ##
  #     - --certificatesresolvers.mytlschallenge.acme.tlschallenge=true # <== Enable TLS-ALPN-01 to generate and renew ACME certs
  #     - --certificatesresolvers.mytlschallenge.acme.email=theafkdeveloper@gmail.com # <== Setting email for certs
  #     - --certificatesresolvers.mytlschallenge.acme.storage=/letsencrypt/acme.json # <== Defining acme file to store cert information
  #   volumes:
  #     - ./letsencrypt:/letsencrypt # <== Volume for certs (TLS)
  #     - /var/run/docker.sock:/var/run/docker.sock # <== Volume for docker admin
  #     - ./dynamic.yaml:/dynamic.yaml # <== Volume for dynamic conf file, **ref: line 27
  #   networks:
  #     - traefik # <== Placing traefik on the network named web, to access containers on this network
  #   labels:
  #     #### Labels define the behavior and rules of the traefik proxy for this container ####
  #     - "traefik.enable=true" # <== Enable traefik on itself to view dashboard and assign subdomain to view it
  #     - "traefik.http.routers.api.rule=Host(`monitor.example.com`)" # <== Setting the domain for the dashboard
  #     - "traefik.http.routers.api.service=api@internal" # <== Enabling the api to be a service to access

  nginx:
    image: nginx:latest
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "2222:2222"
    volumes:
      - ./data/nginx:/etc/nginx/conf.d
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/log/nginx:/var/log/nginx
      # - ./data/certbot/conf:/etc/letsencrypt
      # - ./data/certbot/www:/var/www/certbot
      # - type: bind
      #   source: /home/my-user/elk-stack/.htpasswd
      #   target: /etc/nginx/.htpasswd
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    networks:
      - nginx
      - box

  website:
    build:
      context: /root/git/website
      dockerfile: /root/git/website/Dockerfile
      args:
        env_file: /root/git/website/.env
    image: marcpartensky/website:latest
    restart: unless-stopped
    # ports:
    #   - "443:443"
    env_file:
      - ./data/secrets/website.env
    environment:
      - DEBUG=false
      # - KEY=/app/privkey.pem
      # - CERT=/app/fullchain.pem
      # - KEY=/root/docker/data/certbot/conf/keys/0000_key-certbot.pem
      # - CERT=/root/docker/data/certbot/conf/csr/0000_csr-certbot.pem
    # entrypoint: "daphne -e ssl:7000:privateKey=$$KEY:certKey=$$CERT django_project.asgi:application"
    working_dir: /app
    tty: true
    # entrypoint: daphne -b website -e ssl:443:privateKey=/app/privkey.pem:certKey=/app/fullchain.pem django_project.asgi:application
    entrypoint: daphne django_project.asgi:application --port 80 --bind website -v2
    links:
      - redis
    volumes:
      - /srv/website/media:/app/media
    networks:
      - website
      - nginx
    depends_on:
      - redis
      - postgres
    # tty: true
    # stdin: true

  postgres:
    image: postgres
    restart: unless-stopped
    # ports:
    #   - "5432:5432" # filtered by firewall
    volumes:
      - /srv/postgres/dump:/srv/postgresql/dump
    env_file:
      - data/secrets/postgres.env
    networks:
      - website

  redis:
    image: redis:alpine
    restart: unless-stopped
    networks:
      - website

  certbot:
    image: certbot/certbot
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  # certbot_nginx:
  #     restart: unless-stopped
  #     image: staticfloat/nginx-certbot
  #     ports:
  #         - "80:80/tcp"
  #         - "443:443/tcp"
  #     environment:
  #         CERTBOT_EMAIL: marc.partensky@gmail.com
  #         # variable names are space-separated
  #         ENVSUBST_VARS: FQDN
  #         FQDN: marcpartensky.com
  #     volumes:
  #       - ./conf.d:/etc/nginx/user.conf.d:ro
  #       - letsencrypt:/etc/letsencrypt

  esclave:
    build: /root/git/discord-bot
    image: marcpartensky/discord-bot
    restart: unless-stopped
    env_file:
      - ./data/secrets/esclave.env

  ia:
    build: /root/git/discord-bot
    image: marcpartensky/discord-bot
    restart: unless-stopped
    env_file:
      - ./data/secrets/ia.env

  servant:
    build: /root/git/servitor
    image: marcpartensky/servitor
    restart: unless-stopped

  pandoc:
    build: /root/git/pandoc-api
    image: marcpartensky/pandoc-api
    restart: unless-stopped
    # working_dir: /app
    env_file:
      - ./data/secrets/pandoc.env
    entrypoint: "flask run --host pandoc --port 80"
    volumes:
      - /srv/pandoc:/app
      - /var/log/nginx:/var/log/nginx
    networks:
      - nginx

  # https://github.com/itzg/docker-minecraft-server/blob/master/README.md
  # minecraft_aventure:
  #   image: itzg/minecraft-server
  #   restart: always
  #   environment:
  #     - TZ=Europe/Paris
  #     - OPS=MazexRedstone
  #     - EULA=TRUE
  #     - ENABLE_AUTOPAUSE=TRUE
  #     - ENABLE_COMMAND_BLOCK=TRUE
  #     - MEMORY=2G
  #     - VERSION=1.13.2
  #     - ICON=https://cdn.discordapp.com/attachments/507519157387132940/816443237384454144/maxime.png
  #     - MOTD=Venez jouer sur le serveur de Marc Partensky. Venez! On est bien!
  #     - WORLD=https://download2342.mediafire.com/89adsak3r96g/xavlx2bmrypq2s0/Across+The+Time+II+-+Time+For+Regrets+%28release+1.0.4%29.zip
  #     # - MODS=https://www.example.com/mods/mod1.jar,https://www.example.com/mods/mod2.jar
  #   tty: true
  #   stdin_open: true
  #   volumes:
  #     - /srv/minecraft/data:/data
  #   ports:
  #     - "25565:25565"

  minecraft:
    image: itzg/minecraft-server
    restart: unless-stopped
    environment:
      - TZ=Europe/Paris
      - EULA=TRUE
      - OPS=MazexRedstone
      - ENABLE_COMMAND_BLOCK=TRUE
      - MEMORY=2G
      - VERSION=1.16.5
      - ICON=https://cdn.discordapp.com/attachments/611251401514811392/818288635199225886/server.png
      - MOTD=Venez jouer sur le serveur de Marc Partensky. Venez! On est bien!
      - ANNOUNCE_PLAYER_ACHIEVEMENTS=TRUE
      - LEVEL=Server
      - ONLINE_MODE=FALSE # no need for an account
      - DIFFICULTY=hard
      - VIEW_DISTANCE=32
      # - WORLD=/srv/minecraft/zip/Server.zip
      # - SNOOPER_ENABLED=false
    tty: true
    stdin_open: true
    volumes:
      - /srv/minecraft/data/:/data
    ports:
      - "25565:25565"

  pterodactyl:
    build: /root/fork/panel
    # restart: unless-stopped
    networks:
      - nginx

  notebook:
    image: jupyter/base-notebook
    restart: unless-stopped
    ports:
      - "8888:8888"
    environment:
    #   - GEN_CERT=yes
      - JUPYTER_ENABLE_LAB=yes
      - GRANT_SUDO=yes
    entrypoint: start.sh jupyter lab --user root
    # entrypoint: start-notebook.sh \
    #     --NotebookApp.keyfile=key/0000_key-certbot.pem
    #     --NotebookApp.certfile=cert/0000_csr-certbot.pem
    # volumes:
    #   - /etc/letsencrypt/keys:/home/jovyan/work/key
    #   - /etc/letsencrypt/csr:/home/jovyan/work/cert
    #   - /etc/letsencrypt:/etc/letsencrypt

# env:
  #   image: marcpartensky/env
  #   build:
  #     context: /root/git/dotfiles
  #     dockerfile: /root/git/dotfiles/Dockerfile
  #     args:
  #       env_file: /root/git/dotfiles/.env
  #   ports:
  #     - "22:7020"
  #     - "8022:7021"
  #     volumes:

  elasticsearch:
    # image: docker.elastic.co/elasticsearch/elasticsearch:7.11.1
    # image: docker.elastic.co/elasticsearch/elasticsearch:latest
    image: elasticsearch:latest
    environment:
      - discovery.type=single-node
      - ES_ENABLE_SECURITY=true
    env_file:
      - ./data/secrets/elasticsearch.env
    volumes:
      - /srv/elasticsearch/data:/srv/elasticsearch/data
      # - elasticsearch:/usr/share/elasticsearch/data
    networks:
      - nginx
      - elk
    # ports:
    #   - "9200:9200"
    #   - "9300:9300"
    # ulimits:
    #   memlock:
    #     soft: -1
    #     hard: -1

  kibana:
    # image: docker.elastic.co/kibana/kibana:latest
    image: kibana:latest
    ports:
      - "5601:5601"
    env_file:
      - ./data/secrets/kibana.env
    depends_on:
      - elasticsearch
    networks:
      - nginx

  ialab:
    image: marcpartensky/ialab
    restart: unless-stopped
    build:
      context: /root/git/ialab
      dockerfile: /root/git/ialab/Dockerfile
    environment:
      - FLASK_APP=server.py
      # - FLASK_APP=/app/server.py
      # - FLASK_APP=/app/wsgi.py
    # env_file:
      # - /root/git/ialab/.flaskenv
    # working_dir: /app
    entrypoint: flask run --host ialab --port 80
    # entrypoint: "gunicorn server:app"
    # entrypoint: "gunicorn --chdir /app server:app"
    volumes:
      - /srv/ialab:/app
    networks:
      - nginx

  open_web_calendar:
    working_dir: /app
    restart: unless-stopped
    build:
      context: /root/fork/open-web-calendar
      dockerfile: /root/fork/open-web-calendar/Dockerfile
    environment:
      - HOST=open_web_calendar
      - PORT=80
    networks:
      - nginx
    entrypoint: python app.py

  # discord_voice_recorder:
  #   image: drv
  #   volumes:
  #     - /srv/discord-voice-recorder/recordings:/usr/src/bot/recordings

  wordpress:
    image: wordpress
    restart: unless-stopped
    networks:
      - nginx
      - wordpress
    env_file:
      - data/secrets/wordpress.env

  wordpress_mysql:
    image: mysql
    restart: unless-stopped
    env_file:
      - data/secrets/wordpress_mysql.env
    networks:
      - wordpress

  # gitea:
  #   image: gitea/gitea:1.13.3
  #   environment:
  #     - USER_UID=1000
  #     - USER_GID=1000
  #   restart: unless-stopped
  #   networks:
  #     - gitea
  #   volumes:
  #     - /srv/gitea:/data
  #     - /etc/timezone:/etc/timezone:ro
  #     - /etc/localtime:/etc/localtime:ro
  #   ports:
  #     - "3000:3000"
  #     - "222:22"

  # gitea_mysql:
  #   image: mysql:5.7
  #   restart: unless-stopped
  #   env_file:
  #     - ./data/secrets/gitea.env
  #   environment:
  #     - MYSQL_ROOT_PASSWORD=gitea
  #     - MYSQL_USER=gitea
  #     - MYSQL_PASSWORD=gitea
  #     - MYSQL_DATABASE=gitea
  #   networks:
  #     - gitea
  #   volumes:
  #     - ./mysql:/var/lib/mysql

  samba:
    image: dperson/samba
    volumes:
      - /:/mount
    ports:
      - "139:139"
      - "445:445"

  plantuml:
    image: plantuml/plantuml-server:tomcat
    networks:
      - nginx

  nextcloud_mariadb:
    image: mariadb
    restart: unless-stopped
    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW
    networks:
      - nextcloud
    volumes:
      - nextcloud_mariadb:/var/lib/mysql
    env_file:
      - ./data/secrets/nextcloud.env

  nextcloud:
    image: nextcloud
    restart: unless-stopped
    depends_on:
      - nextcloud_mariadb
    volumes:
      - nextcloud:/var/www/html
    env_file:
      - ./data/secrets/nextcloud.env
    networks:
      - nextcloud
      - nginx

  watchtower:
    image: containrrr/watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - nginx

  searx:
    image: searx/searx
    restart: unless-stopped
    volumes:
      - ./data/searx:/etc/searx
    # environment:
    #   - PORT=80
    #   - BASE_URL=http://localhost:$PORT
    # ports:
    #   - $PORT:8080
    networks:
      - nginx

  todolist:
    image: marcpartensky/je-todoapp-react
    restart: unless-stopped
    build:
      context: /root/git/todoapp/react
      dockerfile: /root/git/todoapp/react/Dockerfile
    environment:
      - PORT=80
      - SPRING_API_URL=https://api.todolist.marcpartensky.com
    depends_on:
      - todolist_api
    networks:
      - nginx
    # entrypoint: ["/bin/sh", "-c", "'SPRING_API_URL=https://api.todolist.marcpartensky.com serve -s build'"]

  todolist_api:
    image: marcpartensky/je-todoapp-spring-api
    restart: unless-stopped
    build:
      context: /root/git/todoapp/spring-api
      dockerfile: /root/git/todoapp/spring-api/Dockerfile
    env_file:
      - ./data/secrets/todolist.env
    environment:
      - PORT=80
      - POSTGRES_HOST=todolist_db
    depends_on:
      - todolist_db
    networks:
      - todolist_api
      - nginx

  todolist_db:
    image: postgres:latest
    restart: unless-stopped
    volumes:
      - /srv/todolist_db/dump:/srv/todolist_db/dump
    env_file:
      - ./data/secrets/todolist.env
    networks:
      - todolist_api

volumes:
  letsencrypt:
  nextcloud:
  nextcloud_mariadb:

networks:
  nextcloud:
  website:
    external: false
  nginx:
  wordpress:
  gitea:
  elk:
  box:
  todolist_api:
  # traefik:
