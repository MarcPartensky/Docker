#
# Please consult the `Deployment` section in the readme if you want to deploy
# this. You *need* to keep this nginx service, even if you have your own,
# otherwise the static files will not be served correctly! If you do remove
# it, configure yours similarly to what's in config/nginx.conf
# Also take a look at the "Static files" section in the .env file

services:
  wger:
    image: wger/server:latest
    restart: unless-stopped
    # depends_on:
    #   db:
    #     condition: service_healthy
    #   cache:
    #     condition: service_healthy
    env_file:
      - ../data/secrets/wger.env
    volumes:
      - static:/home/wger/static
      - media:/home/wger/media
    networks:
      - caddy
      - postgres
      - redis
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8000
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      traefik.enable: "true"
      traefik.http.services.wger.loadbalancer.server.port: 8000
      traefik.http.routers.wger.rule: >
        Host(`wger2.marcpartensky.com`)
      traefik.http.routers.wger.entrypoints: web
      # traefik.http.routers.ui.tls.certresolver: tls
      # traefik.http.routers.ui.tls.certresolver: cloudflare
      # traefik.http.routers.wger.middlewares: ldap_auth

  nginx:
    image: nginx:stable
    restart: unless-stopped
    volumes:
      - ../data/wger/nginx.conf:/etc/nginx/conf.d/default.conf
      - static:/wger/static
      - media:/wger/media
        # ports:
        #   - "80:80"
    networks:
      - postgres
      - caddy
    healthcheck:
      test: service nginx status
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      traefik.enable: "true"
      traefik.http.routers.nginx.entrypoints: web
      traefik.http.services.nginx.loadbalancer.server.port: 80
      traefik.http.routers.nginx.rule: >
        Host(`wger.marcpartensky.com`)
      # traefik.http.routers.ui.tls.certresolver: tls
      # traefik.http.routers.ui.tls.certresolver: cloudflare
       #traefik.http.routers.nginx.middlewares: ldap_auth

  # cache:
  #   image: redis
  #   expose:
  #     - 6379
  #   healthcheck:
  #     test: redis-cli ping
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   restart: unless-stopped

  celery_worker:
    image: wger/server:latest
    restart: unless-stopped
    container_name: wger_celery_worker
    command: /start-worker
    env_file:
      - ../data/secrets/wger.env
    networks:
      - postgres
      - redis
    # depends_on:
    #   cache:
    #     condition: service_healthy
    #   db:
    #     condition: service_healthy
    healthcheck:
      test: celery -A wger inspect ping
      interval: 10s
      timeout: 5s
      retries: 5

  celery_beat:
    image: wger/server:latest
    restart: unless-stopped
    command: /start-beat
    volumes:
      - celery-beat:/home/wger/beat/
    networks:
      - postgres
      - redis
    env_file:
      #   - ./config/.env
      - ../data/secrets/wger.env
    # depends_on:
    #   cache:
    #     condition: service_healthy

volumes:
  celery-beat:
  static:
  media:

networks:
  redis:
    external: true
  caddy:
    external: true
  postgres:
    external: true
