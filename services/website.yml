version: "3.9"

services:
  website:
    image: marcpartensky/website
    restart: unless-stopped
    env_file:
      - ../data/secrets/website.env
    environment:
      VIRTUAL_HOST: marcpartensky.com
      VIRTUAL_PORT: 80
      # DEBUG: true
      # SECURE_SSL_REDIRECT: false
      # KEY: /app/privkey.pem
      # CERT: /app/fullchain.pem
    working_dir: /app
    entrypoint: >
      sh -c "./manage.py migrate;
             ./manage.py collectstatic --noinput;
             daphne django_project.asgi:application --port 80 --bind 0.0.0.0 -v2"
    # entrypoint: "daphne -e ssl:443:privateKey=$$KEY:certKey=$$CERT django_project.asgi:application"
    # entrypoint: daphne -b website -e ssl:443:privateKey=/app/privkey.pem:certKey=/app/fullchain.pem django_project.asgi:application
    # command:
    #   - "80"
    #   - "0.0.0.0"
    depends_on:
      - redis
      - postgres
    volumes:
      - website_media:/app/media
    networks:
      - website
      - caddy
    # healthcheck:
    #     test: ["CMD", "curl", "-f", "http://localhost:80/live"]
    #     interval: 30s
    #     timeout: 10s
    #     retries: 3
    #     start_period: 1m
    labels:
      caddy: marcpartensky.com, marc.wf, marc.tf
      caddy.reverse_proxy: "{{upstreams 80}}"
      # caddy.tls: "internal"
      traefik.enable: "true"
      traefik.http.routers.website.rule: "Host(`marcpartensky.com`)"
      traefik.http.routers.website.entrypoints: "websecure"
      traefik.http.routers.website.tls.certresolver: "tls"
      traefik.http.services.website.loadbalancer.server.port: "80"
    deploy:
      # mode: global
      update_config:
        parallelism: 1
        delay: 5s
        order: start-first
        failure_action: rollback
      rollback_config:
        order: start-first
      resources:
        reservations:
          cpus: "1"
          memory: "500M"

  postgres:
    image: postgres
    restart: unless-stopped
    volumes:
      - postgres:/var/lib/postgresql/data
    env_file:
      - ../data/secrets/postgres.env
    networks:
      - website

  pgweb:
    image: sosedoff/pgweb
    restart: unless-stopped
    env_file:
        - ../data/secrets/postgres.env
    networks:
      - website
      - caddy
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "wget", "-q", "localhost:8081", "-O", "/dev/null"]
    labels:
      caddy: db.marcpartensky.com
      caddy.reverse_proxy: "{{upstreams 8081}}"
      # caddy.reverse_proxy.header_up.Host: "{upstream_hostport}" # redundant
      # caddy.reverse_proxy.header_up.X-Real-IP: "{host}"
      # caddy.reverse_proxy.header_up.X-Forwarded-For: "{host}"  # redundant
      caddy.basicauth: /* bcrypt
      caddy.basicauth.admin: JDJhJDEyJDVRUXdqQllCR2dCSEZ0ZUlaVUZTRE95WXpROFdUcFdXSm4wVGE2TmE4cEkxNHc5Si4venJxCg==

  # postgres_adminer:
  # adminer:
  #   image: adminer
  #   restart: unless-stopped
  #   ports:
  #     - 8080:8080

  redis:
    image: redis:alpine
    restart: unless-stopped
    networks:
      - website
    healthcheck:
       test: ["CMD", "redis-cli","ping"]
volumes:
  website_media:
  postgres:

networks:
  website:
  caddy:
    external: true
    attachable: true
    driver: overlay
